"""
A `Tournament` object describes a tournament for which a single result is published. A `Tournament` consists of a number of `Match` objects, a number of `Registration` objects, and other optional information.

Docs group: Tournament
"""
type Tournament {
  id: ID!

  """
  The tournament's name.
  """
  name: String!

  """
  An abbreviated version of the tournament's `name`. If omitted, assume the same as the `name`.
  """
  short_name: String

  """
  Where this tournament happened.
  """
  tournament_site: TournamentSite

  """
  Validation rules for scoring matches in this tournament.
  """
  scoring_rules: ScoringRules

  """
  The tournament's start date, including time zone, as an ISO 8601-formatted string in the tournament's local time zone.
  """
  start_date: Date

  """
  The tournament's end date, including time zone, as an ISO 8601-formatted string in the tournament's local time zone.
  """
  end_date: Date

  """
  The organizations registered to play in this tournament.
  """
  registrations: [Registration]

  """
  The phases of play in this tournament.
  """
  phases: [Phase]

  """
  The rankings used at this tournament.
  """
  rankings: [Ranking]

  """
  The intended audience of the tournament.
  """
  audience: TournamentAudience

  """
  The level of the tournament, within the context of its `audience`.
  """
  level: TournamentLevel

  """
  Free-form string of question set(s) used at this tournament.
  """
  question_set: String

  """
  The subject matter of the tournament question set(s).
  """
  content: TournamentContent

  """
  Free-form string of other information relevant to tournament.
  """
  info: String
}

enum TournamentAudience {
  elementary_school
  middle_school
  high_school
  community_college
  college
  open
  other
}

enum TournamentLevel {
  novice
  regular
  nationals
  other
}

enum TournamentContent {
  general_academic
  specialized_academic
  trash
  other
}

"""
Docs group: Tournament
"""
type ScoringRules {
  id: ID!

  """
  The name for this set of scoring rules.
  """
  name: String!

  """
  The number of teams that participates in each match. If omitted, assume `2`.
  """
  teams_per_match: Int

  """
  The maximum number of players that may be active at once, per team, in a match. If omitted, assume `4`.
  """
  maximum_players_per_team: Int

  """
  The standard number of tossups heard in a match. If omitted, assume `20`.
  """
  regulation_tossup_count: Int

  """
  The maximum number of tossups heard in a match that does not go into overtime. (Different from `regulation_tossup_count` for tournaments that used timed matches.) If omitted, assume `20`.
  """
  maximum_regulation_tossup_count: Int

  """
  The smallest possible number of overtime tossups or tossup-bonus cycles (as determined by `overtime_includes_bonuses`). If overtime is sudden death from the beginning, this will be `1`, and that is the value assumed if this field is omitted.
  """
  minimum_overtime_question_count: Int

  """
  Are bonuses used in overtime? If omitted, assume `false`.
  """
  overtime_includes_bonuses: Boolean

  """
  The largest integer that is guaranteed to be a factor of a valid final score for one team in one match. If omitted, assume `5`. If present, must be a positive integer.
  """
  total_divisor: Int

  """
  The maximum possible score on a single bonus. Omitting this means there are no bonuses. If present and `bonus_divisor` is present, must be divisible by `bonus_divisor`.
  """
  maximum_bonus_score: Int

  """
  The largest integer that is guaranteed to be a factor of a valid score on a single bonus. If omitted but `maximum_bonus_score` is present, assume `10`. If present, must be a positive integer.
  """
  bonus_divisor: Int

  """
  The smallest number of parts that may exist in one bonus. If omitted but `maximum_bonus_score` is present, assume `3`. If present, this must be a positive integer. If `maximum_parts_per_bonus` is present, this must be less than or equal to `maximum_parts_per_bonus`.
  """
  minimum_parts_per_bonus: Int

  """
  The greatest number of parts that may exist in one bonus. If omitted but `maximum_bonus_score` is present, assume `3`. If present, this must be a positive integer. If `minimum_parts_per_bonus` is present, this must be greater than or equal to `minimum_parts_per_bonus`.
  """
  maximum_parts_per_bonus: Int

  """
  The number of points earned for a correct answer to one bonus part. Omitting this while specifying `maximum_bonus_score` means that the number of points needn't be the same for all bonus parts. If present, this must be a positive integer. If `bonus_divisor` and this are both present, they must be consistent.
  """
  points_per_bonus_part: Int

  """
  `true` if the non-controlling team has an opportunity to answer parts of a bonus that the controlling team did not answer correctly; `false` if not. If omitted but `maximum_bonus_score` is present, assume `false`.
  """
  bonuses_bounce_back: Boolean

  """
  The number of lightning rounds received by each team in each game. If omitted, assume `0`.
  """
  lightning_count_per_team: Int

  """
  The maximum possible score on a single lightning round. If omitted but `lightning_count_per_team` is present and positive, assume `100`.
  """
  maximum_lightning_score: Int

  """
  The largest integer that is guaranteed to be a factor of a valid score on a single lightning round. If omitted but `lightning_count_per_team` is present and positive, assume `10`. If present, must be a positive integer.
  """
  lightning_divisor: Int

  """
  `true` if the non-controlling team has an opportunity to answer parts of a lightning round that the controlling team did not answer correctly; `false` if not. If omitted but `lightning_count_per_team` is present and positive, assume `true`.
  """
  lightnings_bounce_back: Boolean

  """
  The different answer types possible in this tournament.
  """
  answer_types: [AnswerType]!
}

"""
An `AnswerType` object has details about how tossups can be answered. If youâ€™re talking about the traditional -5/10/15 answer types or some subset thereof, you can skip this and use the `value` field instead.

Docs group: Tournament
"""
type AnswerType {
  id: ID!

  """
  The number of points a player receives for this answer type.
  """
  value: Int!

  """
  How to label this answer type on reports. If omitted, turn the `value` into a string.
  """
  label: String

  """
  How to label this answer type on reports when space is limited, perhaps in a table column header. If omitted, use the `label` field.
  """
  short_label: String

  """
  Whether or not the team that gets this answer value will next receive a bonus question. If omitted, assume `true` if `value` is greater than zero and false otherwise.
  """
  awards_bonus: Boolean
}

"""
Docs group: Tournament
"""
type TournamentSite {
  id: ID!

  """
  The tournament site's name (e.g. "Hyatt Regency O'Hare").
  """
  name: String!

  """
  The location of the tournament. Free-form; the purpose is to enable people to find the site. An example might be "9300 Bryn Mawr Avenue, Rosemont, Illinois".
  """
  place: String

  """
  The latitude of the tournament's site (for geolocation).
  """
  latitude: Float

  """
  The longitude of the tournament's site (for geolocation).
  """
  longitude: Float
}
